name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 파이프라인 실행

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Extract build date
        id: vars
        run: echo "BUILD_DATE=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/example-project .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/example-project
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: root
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker network inspect root_app-network >/dev/null 2>&1 || docker network create root_app-network
            existing_container=$(docker ps -q --filter "ancestor=${{ secrets.DOCKER_HUB_USERNAME }}/example-project")
            if [[ -n "$existing_container" ]]; then
              docker stop $existing_container
              docker rm $existing_container
            fi
            docker image prune -f
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/example-project
            docker run -d --name example_project --network root_app-network -p 8084:8084 -e fcmjson=${{ secrets.FCM_JSON }} -e USE_PROFILE=prod ${{ secrets.DOCKER_HUB_USERNAME }}/example-project
